// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Movie {
  id          Int      @id @default(autoincrement())
  movieTitle  String   @unique @db.VarChar(255)
  category    String   @db.VarChar(100)
  cast        String   @db.Text
  director    String   @db.VarChar(255)
  producer    String   @db.VarChar(255)
  synopsis    String?  @db.Text
  trailerURL  String?  @db.VarChar(500)
  filmRating  String   @db.VarChar(10)
  imagePoster String?  @db.VarChar(500)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  

  reviews     Review[]
  movieShows  MovieShow[]

  @@map("movie")
}

model Review {
  id          Int      @id @default(autoincrement())
  reviewText  String   @db.Text
  movieTitle  String   @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  movie       Movie    @relation(fields: [movieTitle], references: [movieTitle])

  @@map("review")
}

model Theater {
  id          Int      @id @default(autoincrement())
  theaterName String   @unique @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  auditoriums Auditorium[]

  @@map("theater")
}

model Auditorium {
  id              Int         @id @default(autoincrement())
  AuditoriumName  String      @db.VarChar(255)
  noOfSeats       Int
  theaterId       Int
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  theater         Theater     @relation(fields: [theaterId], references: [id])
  seats           Seat[]
  movieShows      MovieShow[]

  @@unique([theaterId, AuditoriumName])
  @@map("auditorium")
}

model Seat {
  id            Int      @id @default(autoincrement())
  auditoriumID  Int
  rowNum        String   @db.VarChar(10)
  colNum        Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  auditorium    Auditorium @relation(fields: [auditoriumID], references: [id])
  showSeats     ShowSeats[]
  tickets       Ticket[]

  @@unique([auditoriumID, rowNum, colNum])
  @@map("seat")
}

model MovieShow {
  id                    Int        @id @default(autoincrement())
  showID                Int
  movieID               Int
  auditoriumID          Int
  showStartTime         DateTime
  noAvailabileSeats     Int
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt

  movie                 Movie      @relation(fields: [movieID], references: [id])
  auditorium            Auditorium @relation(fields: [auditoriumID], references: [id])
  showSeats             ShowSeats[]
  bookings              Booking[]


  @@unique([showID, movieID, auditoriumID, showStartTime])
  @@map("movie_show")
}

model ShowSeats {
  seatID    Int
  showID    Int
  status    String   @db.VarChar(50)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  seat      Seat      @relation(fields: [seatID], references: [id])
  movieShow MovieShow @relation(fields: [showID], references: [id])

  @@id([seatID, showID])
  @@map("show_seats")
}


// UserType -> id 1 is Admin, id 2 -> customer
model UserType {
  id    Int    @id
  name  String @unique @db.VarChar(50)

  users User[]

  @@map("user_type")
}

// UserStatus -> id 1 is Active, id 2 is Inactive, id 3 is Suspended
model UserStatus {
  id    Int    @id
  name  String @unique @db.VarChar(50)

  users User[]

  @@map("user_status")
}

model User {
  id                   Int      @id @default(autoincrement())
  firstName            String   @db.VarChar(100)
  lastName             String   @db.VarChar(100)
  email                String   @unique @db.VarChar(255)
  passwordHash         String   @db.VarChar(255) // Stores the bcrypt hash
  refreshTokenId       String?  @unique @db.VarChar(255) // Stores the unique ID/hash of the active refresh token for revocation
  phoneNumber          String?  @db.VarChar(20)
  EnrollforPromotions  Boolean  @default(false)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  userTypeId           Int
  userStatusId         Int

  userType             UserType      @relation(fields: [userTypeId], references: [id])
  userStatus           UserStatus    @relation(fields: [userStatusId], references: [id])
  addresses            Address[]
  paymentCards         PaymentCard[]
  bookings             Booking[]

  @@map("user")
}

// AddressType -> 1 is Home, 2 is Billing
model AddressType {
  id    Int    @id
  name  String @unique @db.VarChar(50)

  addresses Address[]

  @@map("address_type")
}

model Address {
  id            Int      @id @default(autoincrement())
  street        String   @db.VarChar(255)
  city          String   @db.VarChar(100)
  state         String   @db.VarChar(100)
  zipCode       String   @db.VarChar(20)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  addressTypeId Int
  userID        Int

  addressType   AddressType @relation(fields: [addressTypeId], references: [id])
  user          User        @relation(fields: [userID], references: [id])

  paymentCards  PaymentCard[]

  @@map("address")
}

model PaymentCard {
  id               Int      @id @default(autoincrement())
  cardNo           String   @db.VarChar(255)
  maskedCardNo     String   @db.VarChar(10)
  expirationDate   String   @db.VarChar(10) // MM/YY
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  userID           Int
  billingAddressId Int

  user             User    @relation(fields: [userID], references: [id])
  billingAddress   Address @relation(fields: [billingAddressId], references: [id])

  bookings         Booking[]

  @@map("payment_card")
}

model Booking {
  id               Int      @id @default(autoincrement())
  noOfTickets      Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  userID           Int
  showTimeID       Int
  cardID           Int
  promoID          Int

  user             User         @relation(fields: [userID], references: [id])
  movieShow        MovieShow    @relation(fields: [showTimeID], references: [id])
  paymentCard      PaymentCard  @relation(fields: [cardID], references: [id])
  promotion        Promotions   @relation(fields: [promoID], references: [id])

  tickets          Ticket[]   

  @@map("booking")
}

model Ticket {
  id               Int      @id @default(autoincrement())
  
  categoryID    Int
  bookingID     Int
  seatID        Int

  category      TicketCategory    @relation(fields: [categoryID], references: [id])
  booking       Booking           @relation(fields: [bookingID], references: [id])
  seat          Seat              @relation(fields: [seatID], references: [id])

  @@unique([bookingID, seatID])

  @@map("ticket")
}

model TicketCategory { // Adult, Children, Senior with corresponding standard prices
  id               Int      @id @default(autoincrement())
  name             String   @unique @db.VarChar(50)
  price            Int

  tickets          Ticket[]

  @@map("ticket_category")
}

model Promotions {
  id               Int        @id @default(autoincrement())
  promoCode        String     @db.VarChar(20)
  promoValue       String     @db.VarChar(20)
  startDate        DateTime   @db.Date
  expirationDate   DateTime   @db.Date

  bookings         Booking[]

  @@map("promotions")
}


